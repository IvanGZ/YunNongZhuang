/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(48);
	module.exports = __webpack_require__(50);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },

/***/ 4:
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },

/***/ 6:
/***/ function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 * APICloud JavaScript Library
	 * Copyright (c) 2014 apicloud.com
	 */
	(function (window) {
	    var u = {};
	    var isAndroid = /android/gi.test(navigator.appVersion);
	    var uzStorage = function uzStorage() {
	        var ls = window.localStorage;
	        if (isAndroid) {
	            ls = os.localStorage();
	        }
	        return ls;
	    };
	    function parseArguments(url, data, fnSuc, dataType) {
	        if (typeof data == 'function') {
	            dataType = fnSuc;
	            fnSuc = data;
	            data = undefined;
	        }
	        if (typeof fnSuc != 'function') {
	            dataType = fnSuc;
	            fnSuc = undefined;
	        }
	        return {
	            url: url,
	            data: data,
	            fnSuc: fnSuc,
	            dataType: dataType
	        };
	    }
	    u.trim = function (str) {
	        if (String.prototype.trim) {
	            return str == null ? "" : String.prototype.trim.call(str);
	        } else {
	            return str.replace(/(^\s*)|(\s*$)/g, "");
	        }
	    };
	    u.trimAll = function (str) {
	        return str.replace(/\s*/g, '');
	    };
	    u.isElement = function (obj) {
	        return !!(obj && obj.nodeType == 1);
	    };
	    u.isArray = function (obj) {
	        if (Array.isArray) {
	            return Array.isArray(obj);
	        } else {
	            return obj instanceof Array;
	        }
	    };
	    u.isEmptyObject = function (obj) {
	        if (JSON.stringify(obj) === '{}') {
	            return true;
	        }
	        return false;
	    };
	    u.addEvt = function (el, name, fn, useCapture) {
	        if (!u.isElement(el)) {
	            console.warn('$api.addEvt Function need el param, el param must be DOM Element');
	            return;
	        }
	        useCapture = useCapture || false;
	        if (el.addEventListener) {
	            el.addEventListener(name, fn, useCapture);
	        }
	    };
	    u.rmEvt = function (el, name, fn, useCapture) {
	        if (!u.isElement(el)) {
	            console.warn('$api.rmEvt Function need el param, el param must be DOM Element');
	            return;
	        }
	        useCapture = useCapture || false;
	        if (el.removeEventListener) {
	            el.removeEventListener(name, fn, useCapture);
	        }
	    };
	    u.one = function (el, name, fn, useCapture) {
	        if (!u.isElement(el)) {
	            console.warn('$api.one Function need el param, el param must be DOM Element');
	            return;
	        }
	        useCapture = useCapture || false;
	        var that = this;
	        var cb = function cb() {
	            fn && fn();
	            that.rmEvt(el, name, cb, useCapture);
	        };
	        that.addEvt(el, name, cb, useCapture);
	    };
	    u.dom = function (el, selector) {
	        if (arguments.length === 1 && typeof arguments[0] == 'string') {
	            if (document.querySelector) {
	                return document.querySelector(arguments[0]);
	            }
	        } else if (arguments.length === 2) {
	            if (el.querySelector) {
	                return el.querySelector(selector);
	            }
	        }
	    };
	    u.domAll = function (el, selector) {
	        if (arguments.length === 1 && typeof arguments[0] == 'string') {
	            if (document.querySelectorAll) {
	                return document.querySelectorAll(arguments[0]);
	            }
	        } else if (arguments.length === 2) {
	            if (el.querySelectorAll) {
	                return el.querySelectorAll(selector);
	            }
	        }
	    };
	    u.byId = function (id) {
	        return document.getElementById(id);
	    };
	    u.first = function (el, selector) {
	        if (arguments.length === 1) {
	            if (!u.isElement(el)) {
	                console.warn('$api.first Function need el param, el param must be DOM Element');
	                return;
	            }
	            return el.children[0];
	        }
	        if (arguments.length === 2) {
	            return this.dom(el, selector + ':first-child');
	        }
	    };
	    u.last = function (el, selector) {
	        if (arguments.length === 1) {
	            if (!u.isElement(el)) {
	                console.warn('$api.last Function need el param, el param must be DOM Element');
	                return;
	            }
	            var children = el.children;
	            return children[children.length - 1];
	        }
	        if (arguments.length === 2) {
	            return this.dom(el, selector + ':last-child');
	        }
	    };
	    u.eq = function (el, index) {
	        return this.dom(el, ':nth-child(' + index + ')');
	    };
	    u.not = function (el, selector) {
	        return this.domAll(el, ':not(' + selector + ')');
	    };
	    u.prev = function (el) {
	        if (!u.isElement(el)) {
	            console.warn('$api.prev Function need el param, el param must be DOM Element');
	            return;
	        }
	        var node = el.previousSibling;
	        if (node.nodeType && node.nodeType === 3) {
	            node = node.previousSibling;
	            return node;
	        }
	    };
	    u.next = function (el) {
	        if (!u.isElement(el)) {
	            console.warn('$api.next Function need el param, el param must be DOM Element');
	            return;
	        }
	        var node = el.nextSibling;
	        if (node.nodeType && node.nodeType === 3) {
	            node = node.nextSibling;
	            return node;
	        }
	    };
	    u.closest = function (el, selector) {
	        if (!u.isElement(el)) {
	            console.warn('$api.closest Function need el param, el param must be DOM Element');
	            return;
	        }
	        var doms, targetDom;
	        var isSame = function isSame(doms, el) {
	            var i = 0,
	                len = doms.length;
	            for (i; i < len; i++) {
	                if (doms[i].isEqualNode(el)) {
	                    return doms[i];
	                }
	            }
	            return false;
	        };
	        var traversal = function traversal(el, selector) {
	            doms = u.domAll(el.parentNode, selector);
	            targetDom = isSame(doms, el);
	            while (!targetDom) {
	                el = el.parentNode;
	                if (el != null && el.nodeType == el.DOCUMENT_NODE) {
	                    return false;
	                }
	                traversal(el, selector);
	            }
	
	            return targetDom;
	        };
	
	        return traversal(el, selector);
	    };
	    u.contains = function (parent, el) {
	        var mark = false;
	        if (el === parent) {
	            mark = true;
	            return mark;
	        } else {
	            do {
	                el = el.parentNode;
	                if (el === parent) {
	                    mark = true;
	                    return mark;
	                }
	            } while (el === document.body || el === document.documentElement);
	
	            return mark;
	        }
	    };
	    u.remove = function (el) {
	        if (el && el.parentNode) {
	            el.parentNode.removeChild(el);
	        }
	    };
	    u.attr = function (el, name, value) {
	        if (!u.isElement(el)) {
	            console.warn('$api.attr Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (arguments.length == 2) {
	            return el.getAttribute(name);
	        } else if (arguments.length == 3) {
	            el.setAttribute(name, value);
	            return el;
	        }
	    };
	    u.removeAttr = function (el, name) {
	        if (!u.isElement(el)) {
	            console.warn('$api.removeAttr Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (arguments.length === 2) {
	            el.removeAttribute(name);
	        }
	    };
	    u.hasCls = function (el, cls) {
	        if (!u.isElement(el)) {
	            console.warn('$api.hasCls Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (el.className.indexOf(cls) > -1) {
	            return true;
	        } else {
	            return false;
	        }
	    };
	    u.addCls = function (el, cls) {
	        if (!u.isElement(el)) {
	            console.warn('$api.addCls Function need el param, el param must be DOM Element');
	            return;
	        }
	        if ('classList' in el) {
	            el.classList.add(cls);
	        } else {
	            var preCls = el.className;
	            var newCls = preCls + ' ' + cls;
	            el.className = newCls;
	        }
	        return el;
	    };
	    u.removeCls = function (el, cls) {
	        if (!u.isElement(el)) {
	            console.warn('$api.removeCls Function need el param, el param must be DOM Element');
	            return;
	        }
	        if ('classList' in el) {
	            el.classList.remove(cls);
	        } else {
	            var preCls = el.className;
	            var newCls = preCls.replace(cls, '');
	            el.className = newCls;
	        }
	        return el;
	    };
	    u.toggleCls = function (el, cls) {
	        if (!u.isElement(el)) {
	            console.warn('$api.toggleCls Function need el param, el param must be DOM Element');
	            return;
	        }
	        if ('classList' in el) {
	            el.classList.toggle(cls);
	        } else {
	            if (u.hasCls(el, cls)) {
	                u.removeCls(el, cls);
	            } else {
	                u.addCls(el, cls);
	            }
	        }
	        return el;
	    };
	    u.val = function (el, val) {
	        if (!u.isElement(el)) {
	            console.warn('$api.val Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (arguments.length === 1) {
	            switch (el.tagName) {
	                case 'SELECT':
	                    var value = el.options[el.selectedIndex].value;
	                    return value;
	                    break;
	                case 'INPUT':
	                    return el.value;
	                    break;
	                case 'TEXTAREA':
	                    return el.value;
	                    break;
	            }
	        }
	        if (arguments.length === 2) {
	            switch (el.tagName) {
	                case 'SELECT':
	                    el.options[el.selectedIndex].value = val;
	                    return el;
	                    break;
	                case 'INPUT':
	                    el.value = val;
	                    return el;
	                    break;
	                case 'TEXTAREA':
	                    el.value = val;
	                    return el;
	                    break;
	            }
	        }
	    };
	    u.prepend = function (el, html) {
	        if (!u.isElement(el)) {
	            console.warn('$api.prepend Function need el param, el param must be DOM Element');
	            return;
	        }
	        el.insertAdjacentHTML('afterbegin', html);
	        return el;
	    };
	    u.append = function (el, html) {
	        if (!u.isElement(el)) {
	            console.warn('$api.append Function need el param, el param must be DOM Element');
	            return;
	        }
	        el.insertAdjacentHTML('beforeend', html);
	        return el;
	    };
	    u.before = function (el, html) {
	        if (!u.isElement(el)) {
	            console.warn('$api.before Function need el param, el param must be DOM Element');
	            return;
	        }
	        el.insertAdjacentHTML('beforebegin', html);
	        return el;
	    };
	    u.after = function (el, html) {
	        if (!u.isElement(el)) {
	            console.warn('$api.after Function need el param, el param must be DOM Element');
	            return;
	        }
	        el.insertAdjacentHTML('afterend', html);
	        return el;
	    };
	    u.html = function (el, html) {
	        if (!u.isElement(el)) {
	            console.warn('$api.html Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (arguments.length === 1) {
	            return el.innerHTML;
	        } else if (arguments.length === 2) {
	            el.innerHTML = html;
	            return el;
	        }
	    };
	    u.text = function (el, txt) {
	        if (!u.isElement(el)) {
	            console.warn('$api.text Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (arguments.length === 1) {
	            return el.textContent;
	        } else if (arguments.length === 2) {
	            el.textContent = txt;
	            return el;
	        }
	    };
	    u.offset = function (el) {
	        if (!u.isElement(el)) {
	            console.warn('$api.offset Function need el param, el param must be DOM Element');
	            return;
	        }
	        var sl = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
	        var st = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
	
	        var rect = el.getBoundingClientRect();
	        return {
	            l: rect.left + sl,
	            t: rect.top + st,
	            w: el.offsetWidth,
	            h: el.offsetHeight
	        };
	    };
	    u.css = function (el, css) {
	        if (!u.isElement(el)) {
	            console.warn('$api.css Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (typeof css == 'string' && css.indexOf(':') > 0) {
	            el.style && (el.style.cssText += ';' + css);
	        }
	    };
	    u.cssVal = function (el, prop) {
	        if (!u.isElement(el)) {
	            console.warn('$api.cssVal Function need el param, el param must be DOM Element');
	            return;
	        }
	        if (arguments.length === 2) {
	            var computedStyle = window.getComputedStyle(el, null);
	            return computedStyle.getPropertyValue(prop);
	        }
	    };
	    u.jsonToStr = function (json) {
	        if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) === 'object') {
	            return JSON && JSON.stringify(json);
	        }
	    };
	    u.strToJson = function (str) {
	        if (typeof str === 'string') {
	            return JSON && JSON.parse(str);
	        }
	    };
	    u.setStorage = function (key, value) {
	        if (arguments.length === 2) {
	            var v = value;
	            if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) == 'object') {
	                v = JSON.stringify(v);
	                v = 'obj-' + v;
	            } else {
	                v = 'str-' + v;
	            }
	            var ls = uzStorage();
	            if (ls) {
	                ls.setItem(key, v);
	            }
	        }
	    };
	    u.getStorage = function (key) {
	        var ls = uzStorage();
	        if (ls) {
	            var v = ls.getItem(key);
	            if (!v) {
	                return;
	            }
	            if (v.indexOf('obj-') === 0) {
	                v = v.slice(4);
	                return JSON.parse(v);
	            } else if (v.indexOf('str-') === 0) {
	                return v.slice(4);
	            }
	        }
	    };
	    u.rmStorage = function (key) {
	        var ls = uzStorage();
	        if (ls && key) {
	            ls.removeItem(key);
	        }
	    };
	    u.clearStorage = function () {
	        var ls = uzStorage();
	        if (ls) {
	            ls.clear();
	        }
	    };
	
	    /*by king*/
	    u.fixIos7Bar = function (el) {
	        if (!u.isElement(el)) {
	            console.warn('$api.fixIos7Bar Function need el param, el param must be DOM Element');
	            return;
	        }
	        var strDM = api.systemType;
	        if (strDM == 'ios') {
	            var strSV = api.systemVersion;
	            var numSV = parseInt(strSV, 10);
	            var fullScreen = api.fullScreen;
	            var iOS7StatusBarAppearance = api.iOS7StatusBarAppearance;
	            if (numSV >= 7 && !fullScreen && iOS7StatusBarAppearance) {
	                el.style.paddingTop = '20px';
	            }
	        }
	    };
	    u.fixStatusBar = function (el) {
	        if (!u.isElement(el)) {
	            console.warn('$api.fixStatusBar Function need el param, el param must be DOM Element');
	            return;
	        }
	        var sysType = api.systemType;
	        if (sysType == 'ios') {
	            u.fixIos7Bar(el);
	        } else if (sysType == 'android') {
	            var ver = api.systemVersion;
	            ver = parseFloat(ver);
	            if (ver >= 4.4) {
	                el.style.paddingTop = '25px';
	            }
	        }
	    };
	    u.toast = function (title, text, time) {
	        var opts = {};
	        var show = function show(opts, time) {
	            api.showProgress(opts);
	            setTimeout(function () {
	                api.hideProgress();
	            }, time);
	        };
	        if (arguments.length === 1) {
	            var time = time || 500;
	            if (typeof title === 'number') {
	                time = title;
	            } else {
	                opts.title = title + '';
	            }
	            show(opts, time);
	        } else if (arguments.length === 2) {
	            var time = time || 500;
	            var text = text;
	            if (typeof text === "number") {
	                var tmp = text;
	                time = tmp;
	                text = null;
	            }
	            if (title) {
	                opts.title = title;
	            }
	            if (text) {
	                opts.text = text;
	            }
	            show(opts, time);
	        }
	        if (title) {
	            opts.title = title;
	        }
	        if (text) {
	            opts.text = text;
	        }
	        time = time || 500;
	        show(opts, time);
	    };
	    u.post = function () /*url,data,fnSuc,dataType*/{
	        var argsToJson = parseArguments.apply(null, arguments);
	        var json = {};
	        var fnSuc = argsToJson.fnSuc;
	        argsToJson.url && (json.url = argsToJson.url);
	        argsToJson.data && (json.data = argsToJson.data);
	        if (argsToJson.dataType) {
	            var type = argsToJson.dataType.toLowerCase();
	            if (type == 'text' || type == 'json') {
	                json.dataType = type;
	            }
	        } else {
	            json.dataType = 'json';
	        }
	        json.method = 'post';
	        api.ajax(json, function (ret, err) {
	            if (ret) {
	                fnSuc && fnSuc(ret);
	            }
	        });
	    };
	    u.get = function () /*url,fnSuc,dataType*/{
	        var argsToJson = parseArguments.apply(null, arguments);
	        var json = {};
	        var fnSuc = argsToJson.fnSuc;
	        argsToJson.url && (json.url = argsToJson.url);
	        //argsToJson.data && (json.data = argsToJson.data);
	        if (argsToJson.dataType) {
	            var type = argsToJson.dataType.toLowerCase();
	            if (type == 'text' || type == 'json') {
	                json.dataType = type;
	            }
	        } else {
	            json.dataType = 'text';
	        }
	        json.method = 'get';
	        api.ajax(json, function (ret, err) {
	            if (ret) {
	                fnSuc && fnSuc(ret);
	            }
	        });
	    };
	
	    /*end*/
	
	    window.$api = u;
	})(window);

/***/ },

/***/ 7:
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Created by a123 on 17/2/13.
	 */
	
	/*url*/
	// YNZapi = 'http://nz.lekongyun.com/Shop/api';
	//YNZ = 'http://nz.lekongyun.com';
	var YNZapi = 'http://ynz.lekongyun.com/api';
	var YNZ = 'http://ynz.lekongyun.com/';
	/*cookies*/
	function getCookie(cname) {
	    var name = cname + "=";
	    var ca = document.cookie.split(';');
	    for (var i = 0; i < ca.length; i++) {
	        var c = ca[i];
	        while (c.charAt(0) == ' ') {
	            c = c.substring(1);
	        }if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
	    }
	    return "";
	}
	
	module.exports = {
	    getCookie: getCookie,
	    YNZapi: YNZapi,
	    YNZ: YNZ
	};

/***/ },

/***/ 48:
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(49);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/.0.26.2@css-loader/index.js?sourceMap!./specialtyDetail.css", function() {
				var newContent = require("!!../../node_modules/.0.26.2@css-loader/index.js?sourceMap!./specialtyDetail.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 49:
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "body{font-family: \"Microsoft YaHei UI\";padding-bottom: 50px;}\n/*头部*/\n.header{position: fixed;top:0;z-index: 5;}\n.empty{height: 2.25rem;}\n/*商品内容*/\n.img{height: 87px!important;width: 75px;}\n.aui-list-item-media{display: table-cell;vertical-align:middle;}\n.aui-list-item-text{margin-bottom: 0.2rem;}\n.payment{font-size: 1rem;color: orangered}\n.off{font-size: 0.7rem;color: orangered}", "", {"version":3,"sources":["/./specialty/specialtyDetail/specialtyDetail.css"],"names":[],"mappings":"AAAA,KAAK,kCAAkC,qBAAqB,CAAC;AAC7D,MAAM;AACN,QAAQ,gBAAgB,MAAM,WAAW,CAAC;AAC1C,OAAO,gBAAgB,CAAC;AACxB,QAAQ;AACR,KAAK,uBAAuB,YAAY,CAAC;AACzC,qBAAqB,oBAAoB,sBAAsB,CAAC;AAChE,oBAAoB,sBAAsB,CAAC;AAC3C,SAAS,gBAAgB,gBAAgB,CAAC;AAC1C,KAAK,kBAAkB,gBAAgB,CAAC","file":"specialtyDetail.css","sourcesContent":["body{font-family: \"Microsoft YaHei UI\";padding-bottom: 50px;}\n/*头部*/\n.header{position: fixed;top:0;z-index: 5;}\n.empty{height: 2.25rem;}\n/*商品内容*/\n.img{height: 87px!important;width: 75px;}\n.aui-list-item-media{display: table-cell;vertical-align:middle;}\n.aui-list-item-text{margin-bottom: 0.2rem;}\n.payment{font-size: 1rem;color: orangered}\n.off{font-size: 0.7rem;color: orangered}"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },

/***/ 50:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * Created by a123 on 17/2/27.
	 */
	__webpack_require__(6);
	var commom = __webpack_require__(7);
	
	var YNZapi = commom.YNZapi;
	var YNZ = commom.YNZ;
	
	$(document).ready(function () {
	    /*处理前一个页面带的参数*/
	    function GetQueryString(name) {
	        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
	        var r = window.location.search.substr(1).match(reg);
	        if (r != null) return decodeURI(r[2]);return null;
	    }
	    var id = GetQueryString("id");
	    //alert(id);
	
	    /*获取名优特产*/
	    $.ajax({
	        type: 'GET',
	        url: YNZapi + '/Famou/' + id,
	        dataType: 'json',
	        success: function success(data) {
	            if (data.code == 0) {
	                var result = data.result;
	                //console.log(result);
	                /*头部图片*/
	                var famou = result.famou;
	
	                var famouId = famou['famouId'];
	                var famouTitle = famou['famouTitle'];
	                var famouImg = YNZ + famou['famouImg'];
	                var famouDosc = famou['famouDosc'];
	
	                $(".titleImg").attr('src', famouImg); //头部图片
	
	                /*商品列表*/
	                var list = result.list;
	                for (var i in list) {
	                    var goodsId = list[i]['goodsId']; //商品ID
	                    var goodsName = list[i]['goodsName']; //商品名
	                    var goodsSn = list[i]['goodsSn']; //商品货号
	                    var goodsStock = list[i]['goodsStock']; //商品存货
	                    var goodsUnit = list[i]['goodsUnit']; //单位
	                    var saleNum = list[i]['saleNum']; //销量
	                    var shopPrice = list[i]['shopPrice']; //商品价格
	                    var marketPrice = list[i]['marketPrice']; //原价
	                    var isSpec = list[i]['isSpec']; //是否规格
	                    var goodsImg = YNZ + list[i]['goodsImg']; //商品图片
	                    var appraiseNum = list[i]['appraiseNum']; //评价数
	                    var visitNum = list[i]['visitNum']; //访问数
	                    var shopId = list[i]['shopId']; //店铺id
	                    var shopName = list[i]['shopName']; //店铺名
	                    var shopAddress = list[i]['shopAddress']; //店铺地址
	
	                    var template = "<a href='../../List/Detail/Detail.html?id=" + goodsId + "'><li class='aui-list-item'><div class='aui-media-list-item-inner'><div class='aui-list-item-media'><img src=" + goodsImg + " class='img'></div><div class='aui-list-item-inner'><div class='aui-list-item-text'><div class='aui-list-item-title'>" + goodsName + "</div></div><div class='aui-list-item-text'><p class='payment'>" + shopPrice + "</p><span class='off'>线上成交" + saleNum + "单</span></div><div class='aui-list-item-text'><span>" + shopAddress + "</span><span>" + shopName + "</span></div></div></div></li></a>";
	                    $(".content").append(template);
	                }
	            }
	        }
	    });
	});

/***/ }

/******/ });
//# sourceMappingURL=specialtyDetail.min.js.map